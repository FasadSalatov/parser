import asyncio
import logging
from datetime import datetime
from typing import List, Dict

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes

try:
    from config import TELEGRAM_BOT_TOKEN, CHAT_ID, PARSE_INTERVAL, USER_AGENT, COOKIES
except ImportError:
    print("‚ö†Ô∏è –§–∞–π–ª config.py –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–µ config_example.py")
    exit(1)

from parsers.combined_parser import CombinedParser

class FreelanceParserBotCombined:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –±–æ—Ç–∞"""
        self.application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        self.parser = CombinedParser(USER_AGENT, COOKIES)
        self.is_parsing_active = True
        self.last_check_time = None
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(
            format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
            level=logging.INFO
        )
        self.logger = logging.getLogger(__name__)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("status", self.status_command))
        self.application.add_handler(CommandHandler("parse", self.manual_parse_command))
        self.application.add_handler(CommandHandler("toggle", self.toggle_parsing_command))
        self.application.add_handler(CommandHandler("chatid", self.chatid_command))
        self.application.add_handler(CommandHandler("sources", self.sources_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç—É—Å", callback_data='status')],
            [InlineKeyboardButton("üîç –ü–∞—Ä—Å–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data='parse')],
            [InlineKeyboardButton("‚èØÔ∏è –í–∫–ª/–í—ã–∫–ª –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥", callback_data='toggle')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        welcome_text = """
ü§ñ **Freelance Parser Bot** (–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

–≠—Ç–æ—Ç –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–∞—Ä—Å–∏—Ç –∑–∞–∫–∞–∑—ã —Å **FreelanceSpace.ru** –∏ **FL.ru** –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ –Ω–æ–≤—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è—Ö.

**–ò—Å—Ç–æ—á–Ω–∏–∫–∏:**
‚Ä¢ üîπ FreelanceSpace.ru 
‚Ä¢ üîπ FL.ru

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:**
‚Ä¢ –ë–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –≤—Å—ë –≤ –ø–∞–º—è—Ç–∏
‚Ä¢ –°–∞–º—ã–π –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
‚Ä¢ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /status - –°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–∏–Ω–≥–∞
‚Ä¢ /parse - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é
‚Ä¢ /toggle - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥
‚Ä¢ /sources - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º
‚Ä¢ /chatid - –ü–æ–∫–∞–∑–∞—Ç—å ID —á–∞—Ç–∞

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.
        """
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞ (–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)**

**–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–∞—Ö (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π)
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Ç–æ–ª—å–∫–æ –≤ –ø–∞–º—è—Ç–∏
‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ —Å –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: FreelanceSpace.ru –∏ FL.ru

**–ö–æ–º–∞–Ω–¥—ã:**
‚Ä¢ `/start` - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
‚Ä¢ `/status` - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–±–æ—Ç—ã
‚Ä¢ `/parse` - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä—É—á–Ω—É—é
‚Ä¢ `/toggle` - –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥
‚Ä¢ `/sources` - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –ø–∞—Ä—Å–∏–Ω–≥–∞
‚Ä¢ `/chatid` - –ü–æ–∫–∞–∑–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞

**–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏:**
‚Ä¢ –ë–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö - –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç–∏
‚Ä¢ –ü—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –ü–æ—Ä—è–¥–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: —Å–∞–º—ã–π –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –º–µ–∂–¥—É –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def status_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /status"""
        sources_info = self.parser.get_sources_info()
        
        status_text = f"""
üìä **–°—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞ (–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)**

üîÑ –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥: {'‚úÖ –í–∫–ª—é—á—ë–Ω' if self.is_parsing_active else '‚ùå –í—ã–∫–ª—é—á–µ–Ω'}
‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª: {PARSE_INTERVAL} —Å–µ–∫—É–Ω–¥
üïê –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {self.last_check_time or '–ù–µ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å'}

üìà **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {sources_info['total_sent']}
‚Ä¢ FreelanceSpace.ru: {sources_info['freelancespace']['sent_orders']} –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ FL.ru: {sources_info['fl']['sent_orders']} –∑–∞–∫–∞–∑–æ–≤

**–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ –•—Ä–∞–Ω–µ–Ω–∏–µ: –í –ø–∞–º—è—Ç–∏ (–±–µ–∑ –ë–î)
‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫–∏: FreelanceSpace.ru + FL.ru
‚Ä¢ –ü–æ—Ä—è–¥–æ–∫: –°–∞–º—ã–π –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–º
        """
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Ç–∞–∫ –∏ callback –∫–Ω–æ–ø–æ–∫
        if update.callback_query:
            await update.callback_query.edit_message_text(status_text, parse_mode='Markdown')
        else:
            await update.message.reply_text(status_text, parse_mode='Markdown')
    
    async def sources_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /sources - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º"""
        sources_info = self.parser.get_sources_info()
        
        sources_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º**

üîπ **FreelanceSpace.ru**
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {sources_info['freelancespace']['sent_orders']}
‚Ä¢ URL: https://freelancespace.ru

üîπ **FL.ru**  
‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {sources_info['fl']['sent_orders']}
‚Ä¢ URL: https://fl.ru/projects/category/programmirovanie/

üìà **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sources_info['total_sent']} –∑–∞–∫–∞–∑–æ–≤
‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: —Å–º–µ—à–∞–Ω–Ω—ã–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∞)
‚Ä¢ –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è: –≤—ã—Å–æ–∫–∞—è –Ω–∞ –æ–±–µ–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö

üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ FL.ru - —Ç–∞–º —á–∞—Å—Ç–æ –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–∏–µ –±—é–¥–∂–µ—Ç—ã
‚Ä¢ FreelanceSpace.ru - –±–æ–ª—å—à–µ –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤
        """
        
        await update.message.reply_text(sources_text, parse_mode='Markdown')
    
    async def manual_parse_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /parse - —Ä—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
        if update.callback_query:
            await update.callback_query.edit_message_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        else:
            await update.message.reply_text("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±—ã—Å—Ç—Ä—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
        
        start_time = datetime.now()
        
        try:
            new_orders = await self.parse_and_notify()
            end_time = datetime.now()
            duration = (end_time - start_time).total_seconds()
            
            sources_info = self.parser.get_sources_info()
            
            if new_orders:
                result_text = f"‚ö° –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f} —Å–µ–∫!\n\nüìä –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤:\n‚Ä¢ FreelanceSpace.ru: {sources_info['freelancespace']['sent_orders']}\n‚Ä¢ FL.ru: {sources_info['fl']['sent_orders']}"
            else:
                result_text = f"‚ö° –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f} —Å–µ–∫.\n\nüîç –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –æ–±–µ–∏—Ö –ø–ª–æ—â–∞–¥–∫–∞—Ö."
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if update.callback_query:
                await update.callback_query.message.reply_text(result_text)
            else:
                await update.message.reply_text(result_text)
                
        except Exception as e:
            error_text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}"
            if update.callback_query:
                await update.callback_query.message.reply_text(error_text)
            else:
                await update.message.reply_text(error_text)
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞: {str(e)}")
    
    async def toggle_parsing_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /toggle - –≤–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞"""
        self.is_parsing_active = not self.is_parsing_active
        status = "–≤–∫–ª—é—á—ë–Ω" if self.is_parsing_active else "–≤—ã–∫–ª—é—á–µ–Ω"
        emoji = "‚úÖ" if self.is_parsing_active else "‚ùå"
        
        result_text = f"{emoji} –ê–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥ {status}\n\n–ò—Å—Ç–æ—á–Ω–∏–∫–∏: FreelanceSpace.ru + FL.ru"
        
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ –æ–±—ã—á–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, —Ç–∞–∫ –∏ callback –∫–Ω–æ–ø–æ–∫
        if update.callback_query:
            await update.callback_query.edit_message_text(result_text)
        else:
            await update.message.reply_text(result_text)
        
        if self.is_parsing_active:
            self.schedule_parsing()

    async def chatid_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /chatid - –ø–æ–ª—É—á–µ–Ω–∏–µ ID —á–∞—Ç–∞"""
        chat_id = update.effective_chat.id
        chat_type = update.effective_chat.type
        chat_title = getattr(update.effective_chat, 'title', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        
        info_text = f"""
üÜî **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —á–∞—Ç–µ**

**Chat ID:** `{chat_id}`
**–¢–∏–ø —á–∞—Ç–∞:** {chat_type}
**–ù–∞–∑–≤–∞–Ω–∏–µ:** {chat_title}

**–¢–µ–∫—É—â–∏–π ID –≤ config.py:** `{CHAT_ID}`

**–°–æ–≤–ø–∞–¥–µ–Ω–∏–µ:** {'‚úÖ –î–∞' if str(chat_id) == str(CHAT_ID) else '‚ùå –ù–µ—Ç - –æ–±–Ω–æ–≤–∏—Ç–µ config.py'}
        """
        
        await update.message.reply_text(info_text, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == 'status':
            await self.status_command(update, context)
        elif query.data == 'parse':
            await self.manual_parse_command(update, context)
        elif query.data == 'toggle':
            await self.toggle_parsing_command(update, context)
    
    async def parse_and_notify(self) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö (–û–ë–™–ï–î–ò–ù–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)"""
        try:
            parse_start = datetime.now()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            new_orders = self.parser.get_new_orders()
            
            parse_end = datetime.now()
            parse_duration = (parse_end - parse_start).total_seconds()
            
            if not new_orders:
                self.logger.info(f"‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ (–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ {parse_duration:.1f}—Å)")
                return []
            
            send_start = datetime.now()
            self.logger.info(f"üöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ {len(new_orders)} –∑–∞–∫–∞–∑–æ–≤ –∏–∑ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ (–ø–∞—Ä—Å–∏–Ω–≥ –∑–∞ {parse_duration:.1f}—Å)...")
            
            # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            freelancespace_count = len([o for o in new_orders if o.get('source') == 'FreelanceSpace.ru'])
            fl_count = len([o for o in new_orders if o.get('source') == 'FL.ru'])
            
            self.logger.info(f"üì§ FreelanceSpace.ru: {freelancespace_count}, FL.ru: {fl_count}")
            
            # –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –≤ –∫–æ–Ω—Ü–µ)
            for i, order in enumerate(new_orders, 1):
                try:
                    await self.send_order_notification(order)
                    source_emoji = "üîπ" if order.get('source') == 'FreelanceSpace.ru' else "üî∏"
                    self.logger.info(f"üì® {i}/{len(new_orders)}: {source_emoji} {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:30]}... ({order.get('published', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')})")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞ {i}: {str(e)}")
                    continue
            
            send_end = datetime.now()
            send_duration = (send_end - send_start).total_seconds()
            total_duration = (send_end - parse_start).total_seconds()
            
            self.last_check_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            self.logger.info(f"‚ö° –ò–¢–û–ì–û: {len(new_orders)} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ {total_duration:.1f}—Å (–ø–∞—Ä—Å–∏–Ω–≥: {parse_duration:.1f}—Å, –æ—Ç–ø—Ä–∞–≤–∫–∞: {send_duration:.1f}—Å, —Å–∫–æ—Ä–æ—Å—Ç—å: {len(new_orders)/total_duration:.1f} –∑–∞–∫–∞–∑–æ–≤/—Å–µ–∫)")
            return new_orders
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {str(e)}")
            return []
    
    async def send_order_notification(self, order: Dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ"""
        try:
            source_emoji = "üîπ" if order.get('source') == 'FreelanceSpace.ru' else "üî∏"
            
            text = f"""
üÜï **–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –Ω–∞ {order.get('source', '–§—Ä–∏–ª–∞–Ω—Å –ø–ª–æ—â–∞–¥–∫–µ')}** {source_emoji}

üìã **{order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}**

üí∞ **–¶–µ–Ω–∞:** {order.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìÇ **–ö–∞—Ç–µ–≥–æ—Ä–∏—è:** {order.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üë§ **–ê–≤—Ç–æ—Ä:** {order.get('author', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üïê **–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:** {order.get('published', '–ù–µ–¥–∞–≤–Ω–æ')}

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:**
{order.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')}

üîó **–ò—Å—Ç–æ—á–Ω–∏–∫:** {order.get('source', 'freelancespace.ru')}
            """
            
            # –°–æ–∑–¥–∞—ë–º inline –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –∑–∞–∫–∞–∑—É
            keyboard = []
            order_url = order.get('url')
            if order_url:
                keyboard.append([InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–∫–∞–∑—É", url=order_url)])
            
            reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
            
            await self.application.bot.send_message(
                chat_id=CHAT_ID,
                text=text,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {str(e)}")
    
    def schedule_parsing(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞"""
        async def periodic_parse():
            """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥"""
            while self.is_parsing_active:
                try:
                    self.logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–≤—É—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤...")
                    new_orders = await self.parse_and_notify()
                    if new_orders:
                        sources_info = self.parser.get_sources_info()
                        self.logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(new_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (FS: {sources_info['freelancespace']['sent_orders']}, FL: {sources_info['fl']['sent_orders']})")
                    else:
                        self.logger.info("‚ÑπÔ∏è –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                except Exception as e:
                    self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}")
                
                # –ñ–¥—ë–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ä—Å–∏–Ω–≥–æ–º
                await asyncio.sleep(PARSE_INTERVAL)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –∫–∞–∫ –∑–∞–¥–∞—á—É
        asyncio.create_task(periodic_parse())
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ Freelance Parser Bot (–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...")
        
        # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞, –µ—Å–ª–∏ –æ–Ω –≤–∫–ª—é—á—ë–Ω
        if self.is_parsing_active:
            self.schedule_parsing()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        self.logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await self.application.updater.idle()
        except AttributeError:
            import signal
            stop_event = asyncio.Event()
            
            def signal_handler():
                stop_event.set()
            
            for sig in (signal.SIGTERM, signal.SIGINT):
                signal.signal(sig, lambda s, f: signal_handler())
            
            await stop_event.wait()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
    bot = FreelanceParserBotCombined()
    
    try:
        asyncio.run(bot.run())
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")

if __name__ == "__main__":
    main() 