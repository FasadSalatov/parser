#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –∑–∞–∫–∞–∑–æ–≤ —Å FreelanceSpace.ru –∏ FL.ru
–ü—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
from typing import List, Dict
import logging
from datetime import datetime

from .freelancespace_parser_simple import FreelanceSpaceParserSimple
from .fl_parser import FLParser

class CombinedParser:
    def __init__(self, user_agent: str, cookies: dict = None):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞"""
        self.user_agent = user_agent
        self.cookies = cookies or {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤
        self.freelancespace_parser = FreelanceSpaceParserSimple(user_agent, cookies)
        self.fl_parser = FLParser(user_agent, cookies)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # –û–±—â–µ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        self.sent_orders = set()
    
    def get_new_orders(self, pages: int = 3) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        """
        self.logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ ({pages} —Å—Ç—Ä–∞–Ω–∏—Ü)...")
        start_time = datetime.now()
        
        all_orders = []
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ FreelanceSpace.ru
            self.logger.info("üìç –ü–∞—Ä—Å–∏–Ω–≥ FreelanceSpace.ru...")
            freelancespace_orders = self.freelancespace_parser.get_new_orders(pages)
            all_orders.extend(freelancespace_orders)
            self.logger.info(f"‚úÖ FreelanceSpace.ru: {len(freelancespace_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FreelanceSpace.ru: {str(e)}")
        
        try:
            # –ü–∞—Ä—Å–∏–Ω–≥ FL.ru
            self.logger.info("üìç –ü–∞—Ä—Å–∏–Ω–≥ FL.ru...")
            fl_orders = self.fl_parser.get_new_orders(pages)
            all_orders.extend(fl_orders)
            self.logger.info(f"‚úÖ FL.ru: {len(fl_orders)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ FL.ru: {str(e)}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö
        unique_orders = self._filter_unique_orders(all_orders)
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
        sorted_orders = self._sort_orders_by_time(unique_orders)
        
        end_time = datetime.now()
        duration = (end_time - start_time).total_seconds()
        
        self.logger.info(f"‚ö° –û–±—ä–µ–¥–∏–Ω—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω –∑–∞ {duration:.1f}—Å")
        self.logger.info(f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_orders)}, —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤—ã—Ö: {len(sorted_orders)}")
        
        return sorted_orders
    
    def _filter_unique_orders(self, orders: List[Dict]) -> List[Dict]:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        unique_orders = []
        seen_ids = set()
        
        for order in orders:
            order_id = order.get('id')
            if order_id and order_id not in seen_ids and order_id not in self.sent_orders:
                unique_orders.append(order)
                seen_ids.add(order_id)
                self.sent_orders.add(order_id)
        
        return unique_orders
    
    def _sort_orders_by_time(self, orders: List[Dict]) -> List[Dict]:
        """
        –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞, —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
        """
        def time_to_minutes(time_str: str) -> int:
            """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
            if not time_str or time_str == "–ù–µ–¥–∞–≤–Ω–æ":
                return 0  # –°–∞–º—ã–µ –Ω–æ–≤—ã–µ - 0 –º–∏–Ω—É—Ç
            
            time_str = time_str.lower()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            import re
            numbers = re.findall(r'\d+', time_str)
            if not numbers:
                return 0
                
            num = int(numbers[0])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
            if '—Å–µ–∫—É–Ω–¥' in time_str:
                return max(1, num // 60)  # –°–µ–∫—É–Ω–¥—ã -> –º–∏–Ω—É—Ç—ã (–º–∏–Ω–∏–º—É–º 1)
            elif '–º–∏–Ω—É—Ç' in time_str:
                return num
            elif '—á–∞—Å' in time_str:
                return num * 60
            elif '–¥–µ–Ω—å' in time_str or '–¥–Ω—è' in time_str or '–¥–Ω–µ–π' in time_str:
                return num * 24 * 60
            elif '–Ω–µ–¥–µ–ª' in time_str:
                return num * 7 * 24 * 60
            elif '–º–µ—Å—è—Ü' in time_str:
                return num * 30 * 24 * 60
            else:
                return 0  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç = —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ
        
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞, —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
            sorted_orders = sorted(orders, key=lambda x: time_to_minutes(x.get('published', '')), reverse=True)
            return sorted_orders
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
            # –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return orders
    
    @property
    def total_sent_orders(self) -> int:
        """–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"""
        return len(self.sent_orders)
    
    def get_sources_info(self) -> Dict:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö"""
        return {
            'freelancespace': {
                'name': 'FreelanceSpace.ru',
                'sent_orders': len(self.freelancespace_parser.sent_orders)
            },
            'fl': {
                'name': 'FL.ru',
                'sent_orders': len(self.fl_parser.sent_orders)
            },
            'total_sent': self.total_sent_orders
        } 