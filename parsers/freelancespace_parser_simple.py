import requests
import json
import time
from datetime import datetime
from typing import List, Dict, Optional
import logging

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
try:
    from performance_config import get_performance_settings
    PERFORMANCE_MODE = get_performance_settings()
except ImportError:
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
    PERFORMANCE_MODE = {
        'max_pages': 3,
        'parallel_sending': True,
        'page_delay': 0.0,
        'description': '–ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'
    }

class FreelanceSpaceParserSimple:
    def __init__(self, user_agent: str, cookies: dict = None):
        """
        –£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä FreelanceSpace.ru –±–µ–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
        Args:
            user_agent: User-Agent –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            cookies: –ö—É–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        """
        self.base_url = "https://freelancespace.ru"
        self.api_url = "https://freelancespace.ru/ajax/filter_orders.php"
        self.session = requests.Session()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        self.session.headers.update({
            'User-Agent': user_agent,
            'Accept': '*/*',
            'Accept-Language': 'ru-RU,ru;q=0.9,en-US;q=0.8,en;q=0.7',
            'Accept-Encoding': 'gzip, deflate, br, zstd',
            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
            'Origin': 'https://freelancespace.ru',
            'Referer': 'https://freelancespace.ru/dashboard',
            'Sec-Ch-Ua': '"Chromium";v="136", "Google Chrome";v="136", "Not.A/Brand";v="99"',
            'Sec-Ch-Ua-Mobile': '?0',
            'Sec-Ch-Ua-Platform': '"Windows"',
            'Sec-Fetch-Dest': 'empty',
            'Sec-Fetch-Mode': 'cors',
            'Sec-Fetch-Site': 'same-origin',
            'X-Requested-With': 'XMLHttpRequest'
        })
        
        if cookies:
            self.session.cookies.update(cookies)
            
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)
        
        # –°–ø–∏—Å–æ–∫ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–≤ –ø–∞–º—è—Ç–∏)
        self.sent_orders = set()
    
    def parse_orders(self, max_pages: int = 5, search: str = "") -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–∫–∞–∑–æ–≤ —Å FreelanceSpace.ru —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        
        Args:
            max_pages: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            search: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π)
        """
        all_orders = []
        start_time = time.time()
        
        self.logger.info(f"üöÄ –ë–´–°–¢–†–´–ô –ø–∞—Ä—Å–∏–Ω–≥ {max_pages} —Å—Ç—Ä–∞–Ω–∏—Ü (–±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫)...")
        
        for page in range(1, max_pages + 1):
            try:
                page_start = time.time()
                
                # –î–∞–Ω–Ω—ã–µ –¥–ª—è POST –∑–∞–ø—Ä–æ—Å–∞
                data = {
                    'search': search,
                    'page': page
                }
                
                self.logger.info(f"üì§ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}/{max_pages}: POST –∑–∞–ø—Ä–æ—Å –Ω–∞ {self.api_url}")
                
                response = self.session.post(self.api_url, data=data, timeout=30)
                
                request_time = time.time() - page_start
                
                parse_start = time.time()
                self.logger.info(f"üì• –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Ä–∞–∑–º–µ—Ä {len(response.text)} —Å–∏–º–≤–æ–ª–æ–≤ (–∑–∞–ø—Ä–æ—Å {request_time:.2f}—Å)")
                
                if response.status_code == 200:
                    orders = self._parse_html_response(response.text, page)
                    parse_time = time.time() - parse_start
                    
                    if not orders:
                        self.logger.info(f"üö´ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –∑–∞–∫–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥")
                        break
                        
                    all_orders.extend(orders)
                    page_total = time.time() - page_start
                    self.logger.info(f"‚ö° –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –¥–æ–±–∞–≤–ª–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ {page_total:.2f}—Å (–∑–∞–ø—Ä–æ—Å: {request_time:.2f}—Å, –ø–∞—Ä—Å–∏–Ω–≥: {parse_time:.2f}—Å)")
                    
                    # –ù–ê–°–¢–†–ê–ò–í–ê–ï–ú–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê: –±–µ—Ä—ë–º –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    page_delay = PERFORMANCE_MODE.get('page_delay', 0.0)
                    if page_delay > 0 and page < max_pages:
                        time.sleep(page_delay)
                else:
                    self.logger.error(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: HTTP –æ—à–∏–±–∫–∞ {response.status_code}")
                    break
                    
            except requests.exceptions.Timeout:
                self.logger.error(f"‚è∞ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞")
                break
            except requests.exceptions.ConnectionError as e:
                self.logger.error(f"üåê –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –æ—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {str(e)}")
                break
            except Exception as e:
                self.logger.error(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
                continue
        
        # –°–û–†–¢–ò–†–£–ï–ú –ü–û –í–†–ï–ú–ï–ù–ò –ü–£–ë–õ–ò–ö–ê–¶–ò–ò (—Å–∞–º—ã–µ —Å–≤–µ–∂–∏–µ –≤ –∫–æ–Ω—Ü–µ)
        all_orders_sorted = self._sort_orders_by_time(all_orders)
        
        total_time = time.time() - start_time
        self.logger.info(f"üèÅ –ò–¢–û–ì–û: {len(all_orders_sorted)} –∑–∞–∫–∞–∑–æ–≤ –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥ (—Å–∫–æ—Ä–æ—Å—Ç—å: {len(all_orders_sorted)/total_time:.1f} –∑–∞–∫–∞–∑–æ–≤/—Å–µ–∫)")
        return all_orders_sorted
    
    def _parse_html_response(self, html: str, page_num: int = 1) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏–Ω–≥ HTML –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–∞—Ö
        
        Args:
            html: HTML –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        """
        from bs4 import BeautifulSoup
        
        orders = []
        soup = BeautifulSoup(html, 'html.parser')
        
        self.logger.info(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –Ω–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ HTML (—Ä–∞–∑–º–µ—Ä: {len(html)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        # –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º –∑–∞–∫–∞–∑—ã –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
        buttons = soup.find_all(text=lambda text: text and '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' in text)
        self.logger.info(f"üîç –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –Ω–∞–π–¥–µ–Ω–æ {len(buttons)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å —Ç–µ–∫—Å—Ç–æ–º '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è'")
        
        order_blocks = []
        for button in buttons:
            parent = button.find_parent()
            depth = 0
            while parent and depth < 15:  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≥–ª—É–±–∏–Ω—É –ø–æ–∏—Å–∫–∞
                if self._is_order_block(parent):
                    order_blocks.append(parent)
                    break
                parent = parent.find_parent()
                depth += 1
        
        # –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º –ø–æ CSS —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º (—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –±–ª–æ–∫–æ–≤)
        css_selectors = [
            'div.border.border-gray-300',  # –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ–ª–µ–∫—Ç–æ—Ä –±–ª–æ–∫–æ–≤
            'div[class*="border"]',        # –õ—é–±—ã–µ –±–ª–æ–∫–∏ —Å border
            'div[class*="shadow"]',        # –ë–ª–æ–∫–∏ —Å —Ç–µ–Ω—å—é
            'div[class*="rounded"]',       # –û–∫—Ä—É–≥–ª—ë–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        ]
        
        for selector in css_selectors:
            blocks = soup.select(selector)
            for block in blocks:
                if self._is_order_block(block) and block not in order_blocks:
                    order_blocks.append(block)
        
        # –ú–µ—Ç–æ–¥ 3: –ü–æ–∏—Å–∫ –ø–æ —Å—Å—ã–ª–∫–∞–º –Ω–∞ –∑–∞–∫–∞–∑—ã
        order_links = soup.find_all('a', href=lambda x: x and 'order?id=' in x)
        for link in order_links:
            parent = link.find_parent()
            depth = 0
            while parent and depth < 10:
                if self._is_order_block(parent) and parent not in order_blocks:
                    order_blocks.append(parent)
                    break
                parent = parent.find_parent()
                depth += 1
        
        self.logger.info(f"üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –≤—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ {len(order_blocks)} –±–ª–æ–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –±–ª–æ–∫–∏
        for i, block in enumerate(order_blocks):
            try:
                order = self._extract_order_data(block)
                if order:
                    orders.append(order)
                    self.logger.info(f"‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}, –±–ª–æ–∫ {i+1}: {order.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            except Exception as e:
                self.logger.error(f"‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}, –±–ª–æ–∫ {i+1}: –æ—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è: {str(e)}")
                continue
        
        self.logger.info(f"üéâ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page_num}: –∏–∑–≤–ª–µ—á–µ–Ω–æ {len(orders)} –∑–∞–∫–∞–∑–æ–≤")
        return orders
    
    def _is_order_block(self, element) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –±–ª–æ–∫–æ–º –∑–∞–∫–∞–∑–∞"""
        if not element or not hasattr(element, 'get_text'):
            return False
        
        text = element.get_text()
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∑–∞–∫–∞–∑–∞
        has_action_button = any(word in text for word in ['–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è', '–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ'])
        
        # –¶–µ–Ω–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        has_price = any(word in text for word in ['‚ÇΩ', '—Ä—É–±', '–ü–æ –¥–æ–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', '–æ—Ç ', '–¥–æ ', '—Ä—É–±.'])
        
        # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        has_time = any(word in text for word in ['–Ω–∞–∑–∞–¥', '—á–∞—Å', '–¥–µ–Ω—å', '–º–∏–Ω—É—Ç', '—Å–µ–≥–æ–¥–Ω—è', '–≤—á–µ—Ä–∞'])
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–∫–∞–∑–∞
        has_order_indicators = any(word in text for word in [
            '–∫–∞—Ç–µ–≥–æ—Ä–∏', '–∑–∞–∫–∞–∑', '–ø—Ä–æ–µ–∫—Ç', '–∑–∞–¥–∞—á', '—Ä–∞–±–æ—Ç', '—É—Å–ª—É–≥',
            '–∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª', '–∑–∞–∫–∞–∑—á–∏–∫', '–∞–≤—Ç–æ—Ä', '–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω', '—Å–æ–∑–¥–∞–Ω'
        ])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ (–∑–∞–∫–∞–∑—ã –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ)
        is_substantial = len(text.strip()) > 50
        
        # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –∑–∞–∫–∞–∑—ã
        has_order_link = False
        if hasattr(element, 'find_all'):
            links = element.find_all('a', href=True)
            for link in links:
                href = link.get('href', '')
                if 'order' in href or 'task' in href or 'project' in href:
                    has_order_link = True
                    break
        
        # –ë–ª–æ–∫ —Å—á–∏—Ç–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑–æ–º –µ—Å–ª–∏:
        # 1. –ï—Å—Ç—å –∫–Ω–æ–ø–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è –ò–õ–ò —Å—Å—ã–ª–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑
        # 2. –ï—Å—Ç—å —Ü–µ–Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ò–õ–ò –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ò–õ–ò –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–∫–∞–∑–∞  
        # 3. –ë–ª–æ–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π
        
        is_order = (has_action_button or has_order_link) and \
                   (has_price or has_time or has_order_indicators) and \
                   is_substantial
        
        return is_order
    
    def _extract_order_data(self, block) -> Optional[Dict]:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –∏–∑ HTML –±–ª–æ–∫–∞ –ø–æ —Ç–æ—á–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ FreelanceSpace
        
        Args:
            block: BeautifulSoup —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–∫–∞–∑–æ–º
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ None
        """
        try:
            # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ URL –∏–∑ h2 > a
            title_element = block.find('h2', class_=['text-xl', 'font-semibold', 'text-gray-800', 'mb-2'])
            if not title_element:
                return None
            
            title_link = title_element.find('a')
            if not title_link:
                return None
            
            title = title_link.get_text(strip=True)
            url = title_link.get('href', '')
            
            if not title:
                return None
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π URL
            if url and not url.startswith('http'):
                url = f"https://freelancespace.ru/{url.lstrip('/')}"
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –∏–∑ URL
            order_id = None
            if 'order?id=' in url:
                try:
                    order_id = url.split('order?id=')[1].split('&')[0]
                except:
                    pass
            
            if not order_id:
                order_id = str(abs(hash(title + url)))
            
            # 2. –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –∏–∑ span —Å –∫–ª–∞—Å—Å–æ–º font-semibold –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏
            author = "–ù–µ —É–∫–∞–∑–∞–Ω"
            # –ò—â–µ–º –≤ –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ –±–ª–æ–∫–∞, –≥–¥–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–≤—Ç–æ—Ä–µ
            author_container = block.find('div', class_=['flex', 'items-start', 'md:items-center', 'gap-4'])
            if author_container:
                # –ò—â–µ–º span —Å –∏–º–µ–Ω–µ–º –∞–≤—Ç–æ—Ä–∞ - –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –≤–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è desktop –≤–µ—Ä—Å–∏–∏
                author_spans = author_container.find_all('span', class_='hidden')
                for span in author_spans:
                    if 'sm:inline' in span.get('class', []):
                        author_text = span.get_text(strip=True)
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º—è, –∞ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        if len(author_text) < 50 and author_text != title and '...' not in author_text:
                            author = author_text
                            break
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ hidden span, –∏—â–µ–º –≤ –æ–±—ã—á–Ω—ã—Ö
                if author == "–ù–µ —É–∫–∞–∑–∞–Ω":
                    author_spans = author_container.find_all('span', class_=['text-gray-800', 'font-semibold'])
                    for span in author_spans:
                        if 'font-semibold' in span.get('class', []):
                            author_text = span.get_text(strip=True)
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∏–º—è, –∞ –Ω–µ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏ —É–¥–∞–ª—è–µ–º –¥—É–±–ª–∏
                            if (len(author_text) < 50 and author_text != title and 
                                '...' not in author_text and not author_text.endswith(author_text[:len(author_text)//2])):
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ (–ê—Ä—Å–µ–Ω–∏–π–ê—Ä—Å–µ–Ω–∏–π -> –ê—Ä—Å–µ–Ω–∏–π)
                                if len(author_text) > 2:
                                    half_len = len(author_text) // 2
                                    if author_text[:half_len] == author_text[half_len:]:
                                        author = author_text[:half_len]
                                    else:
                                        author = author_text
                                break
            
            # 3. –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—É –∏–∑ –ø—Ä–∞–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞
            price = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            price_container = block.find('div', class_=['mt-2', 'md:mt-0', 'md:text-right'])
            if price_container:
                price_element = price_container.find('p', class_=['font-semibold', 'text-lg', 'text-gray-800'])
                if price_element:
                    price = price_element.get_text(strip=True)
            
            # 4. –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –±–ª–æ–∫–∞ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º  
            category = "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
            # –ò—â–µ–º –≤—Å–µ –±–ª–æ–∫–∏ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
            category_containers = block.find_all('div', class_=['flex', 'items-center', 'text-sm', 'text-gray-500'])
            for container in category_containers:
                if 'mb-4' in container.get('class', []) and 'gap-4' in container.get('class', []):
                    # –ò—â–µ–º –ø–µ—Ä–≤—ã–π p —ç–ª–µ–º–µ–Ω—Ç - —ç—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                    first_p = container.find('p')
                    if first_p:
                        cat_text = first_p.get_text(strip=True)
                        # –°–ø–∏—Å–æ–∫ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                        valid_categories = [
                            '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–î–∏–∑–∞–π–Ω', '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥', 'SEO –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ', 
                            '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–î—Ä—É–≥–æ–µ', '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ', 'DevOps', 
                            'AI - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç', '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ',
                            '–ê—É–¥–∏–æ/–≤–∏–¥–µ/—Ñ–æ—Ç–æ', '–†–µ–∫–ª–∞–º–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥', '–ö–æ–ø–∏—Ä–∞–π—Ç–∏–Ω–≥ –∏ —Ç–µ–∫—Å—Ç—ã'
                        ]
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è
                        if (cat_text in valid_categories and 
                            '‚ÇΩ' not in cat_text and '—Ä—É–±' not in cat_text and '–¥–æ–≥–æ–≤–æ—Ä' not in cat_text.lower()):
                            category = cat_text
                            break
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–µ –±–ª–æ–∫–∞
            if category == "–ù–µ —É–∫–∞–∑–∞–Ω–∞":
                block_text = block.get_text()
                if '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞' in block_text:
                    category = '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞'
                elif '–î–∏–∑–∞–π–Ω' in block_text:
                    category = '–î–∏–∑–∞–π–Ω'
                elif 'AI - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç' in block_text:
                    category = 'AI - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç'
                elif 'SEO –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ' in block_text:
                    category = 'SEO –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ'
                elif '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ' in block_text:
                    category = '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ'
            
            # 5. –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏–∑ –±–ª–æ–∫–∞ —Å –∏–∫–æ–Ω–∫–æ–π schedule
            published = "–ù–µ–¥–∞–≤–Ω–æ"
            # –ò—â–µ–º –±–ª–æ–∫ —Å –∏–∫–æ–Ω–∫–∞–º–∏ visibility –∏ schedule
            stats_containers = block.find_all('div', class_=['flex', 'items-center', 'text-sm', 'text-gray-500'])
            for stats_container in stats_containers:
                if 'gap-4' in stats_container.get('class', []) and 'mb-4' in stats_container.get('class', []):
                    # –ò—â–µ–º –∏–∫–æ–Ω–∫—É schedule (–º–æ–∂–µ—Ç –±—ã—Ç—å –∫–∞–∫ —Ç–µ–∫—Å—Ç, —Ç–∞–∫ –∏ material icon)
                    schedule_icons = stats_container.find_all('span', class_='material-symbols-outlined')
                    for icon in schedule_icons:
                        if icon.get_text(strip=True) == 'schedule':
                            # –°–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∏–∫–æ–Ω–∫–∏ - –≤—Ä–µ–º—è
                            next_p = icon.find_next_sibling('p')
                            if next_p:
                                time_text = next_p.get_text(strip=True)
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤—Ä–µ–º—è
                                if any(word in time_text for word in ['–Ω–∞–∑–∞–¥', '—á–∞—Å', '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—É']):
                                    published = time_text
                                    break
                    
                    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤—Ä–µ–º—è, –≤—ã—Ö–æ–¥–∏–º –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ —Ü–∏–∫–ª–∞
                    if published != "–ù–µ–¥–∞–≤–Ω–æ":
                        break
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
            if published == "–ù–µ–¥–∞–≤–Ω–æ":
                # –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º –≤—Å–µ p —ç–ª–µ–º–µ–Ω—Ç—ã —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
                all_p = block.find_all('p')
                for p in all_p:
                    p_text = p.get_text(strip=True)
                    if any(word in p_text for word in ['–Ω–∞–∑–∞–¥', '—á–∞—Å', '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—É', '—Å–µ–∫—É–Ω–¥']) and len(p_text) < 50:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –¥—Ä—É–≥–∏–µ –¥–∞–Ω–Ω—ã–µ
                        if not any(skip in p_text for skip in ['‚ÇΩ', '—Ä—É–±', '–∫–∞—Ç–µ–≥–æ—Ä–∏', title, '–ø—Ä–æ—Å–º–æ—Ç—Ä', '–∫–æ–º–º–µ–Ω—Ç']):
                            published = p_text
                            break
                
                # –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–º–∏ –∏–∫–æ–Ω–∫–∞–º–∏
                if published == "–ù–µ–¥–∞–≤–Ω–æ":
                    all_material_icons = block.find_all('span', class_='material-symbols-outlined')
                    for icon in all_material_icons:
                        if 'schedule' in icon.get_text():
                            # –ò—â–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –≤—Ä–µ–º–µ–Ω–µ–º
                            parent = icon.parent
                            if parent:
                                next_elements = parent.find_all('p')
                                for elem in next_elements:
                                    elem_text = elem.get_text(strip=True)
                                    if any(word in elem_text for word in ['–Ω–∞–∑–∞–¥', '—á–∞—Å', '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π', '–º–∏–Ω—É—Ç', '–º–∏–Ω—É—Ç—É']):
                                        published = elem_text
                                        break
                            if published != "–ù–µ–¥–∞–≤–Ω–æ":
                                break
                
                # –ï—Å–ª–∏ –≤—Å—ë –µ—â—ë –Ω–µ –Ω–∞—à–ª–∏, –∏—â–µ–º –≤ span —Å "–±—ã–ª(–∞)"
                if published == "–ù–µ–¥–∞–≤–Ω–æ":
                    status_spans = block.find_all('span', class_='text-gray-500')
                    for span in status_spans:
                        span_text = span.get_text(strip=True)
                        if '–±—ã–ª(–∞)' in span_text:
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —á–∞—Å—Ç—å –ø–æ—Å–ª–µ "–±—ã–ª(–∞)"
                            parts = span_text.split('–±—ã–ª(–∞)')
                            if len(parts) > 1:
                                time_part = parts[1].strip()
                                if time_part and ('—á–∞—Å' in time_part or '–¥–µ–Ω—å' in time_part or '–Ω–µ–¥–∞–≤–Ω–æ' in time_part):
                                    published = time_part
                                    break
            
            # 6. –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑ p —Å –∫–ª–∞—Å—Å–æ–º text-gray-700
            description = ""
            desc_element = block.find('p', class_=['text-sm', 'text-gray-700', 'mb-4', 'break-words'])
            if desc_element:
                description = desc_element.get_text(strip=True)
            
            # –£–∫–æ—Ä–∞—á–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            if len(description) > 200:
                description = description[:200] + '...'
            
            return {
                'id': order_id,
                'title': title,
                'description': description,
                'price': price,
                'category': category,
                'author': author,
                'published': published,
                'url': url,
                'source': 'freelancespace.ru'
            }
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {str(e)}")
            return None
    
    def get_new_orders(self, max_pages: int = None) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (–∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å)
        
        Args:
            max_pages: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–µ—Å–ª–∏ None - –±–µ—Ä—ë—Ç—Å—è –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ —è–≤–Ω–æ
        if max_pages is None:
            max_pages = PERFORMANCE_MODE.get('max_pages', 3)
            self.logger.info(f"üöÄ –†–µ–∂–∏–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {PERFORMANCE_MODE.get('description', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}")
        
        # –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ø–∞—Ä—Å–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        all_orders = self.parse_orders(max_pages=max_pages)
        new_orders = []
        
        for order in all_orders:
            order_id = order.get('id')
            if order_id and order_id not in self.sent_orders:
                new_orders.append(order)
                self.sent_orders.add(order_id)
        
        self.logger.info(f"üìã –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {len(new_orders)}")
        return new_orders
    
    def _sort_orders_by_time(self, orders: List[Dict]) -> List[Dict]:
        """
        –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞, —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
        
        Args:
            orders: –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
            
        Returns:
            –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤
        """
        def time_to_minutes(time_str: str) -> int:
            """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–∏–Ω—É—Ç—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"""
            if not time_str or time_str == "–ù–µ–¥–∞–≤–Ω–æ":
                return 0  # –°–∞–º—ã–µ –Ω–æ–≤—ã–µ - 0 –º–∏–Ω—É—Ç
            
            time_str = time_str.lower()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            import re
            numbers = re.findall(r'\d+', time_str)
            if not numbers:
                return 0
                
            num = int(numbers[0])
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –º–∏–Ω—É—Ç—ã
            if '—Å–µ–∫—É–Ω–¥' in time_str:
                return max(1, num // 60)  # –°–µ–∫—É–Ω–¥—ã -> –º–∏–Ω—É—Ç—ã (–º–∏–Ω–∏–º—É–º 1)
            elif '–º–∏–Ω—É—Ç' in time_str:
                return num
            elif '—á–∞—Å' in time_str:
                return num * 60
            elif '–¥–µ–Ω—å' in time_str or '–¥–Ω—è' in time_str or '–¥–Ω–µ–π' in time_str:
                return num * 24 * 60
            elif '–Ω–µ–¥–µ–ª' in time_str:
                return num * 7 * 24 * 60
            elif '–º–µ—Å—è—Ü' in time_str:
                return num * 30 * 24 * 60
            else:
                return 0  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç = —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ
        
        try:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –≤—Ä–µ–º–µ–Ω–∏ (—Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ —Å–Ω–∞—á–∞–ª–∞, —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –≤ –∫–æ–Ω—Ü–µ)
            sorted_orders = sorted(orders, key=lambda x: time_to_minutes(x.get('published', '')), reverse=True)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
            if sorted_orders:
                first_time = sorted_orders[0].get('published', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                last_time = sorted_orders[-1].get('published', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                self.logger.info(f"üïê –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: –æ—Ç '{first_time}' –¥–æ '{last_time}' (—Å–∞–º—ã–π –Ω–æ–≤—ã–π –≤ –∫–æ–Ω—Ü–µ)")
            
            return sorted_orders
            
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏: {str(e)}")
            # –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å
            return orders 